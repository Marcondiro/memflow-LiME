use memflow::prelude::{ConnectorArgs, PhysicalAddress, PhysicalMemory};
use memflow_lime::create_connector;

#[test]
fn read_physical_location() {
    let addr = PhysicalAddress::from(0x1000);
    let volatility_output = [
        0x48, 0x89, 0xc6, 0x48, 0x05, 0x0b, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x48, 0x8d, 0x86, 0x58,
        0x00, 0x00, 0x00, 0x89, 0x86, 0x50, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x86, 0xd0, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x86, 0x42, 0x00, 0x00, 0x00, 0x0f, 0x01, 0x96, 0x40, 0x00, 0x00, 0x00,
        0xff, 0xae, 0x50, 0x00, 0x00, 0x00, 0x66, 0x66, 0x2e, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x66, 0x90, 0x20, 0x00, 0xd0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x0f, 0x1f, 0x44, 0x00, 0x00, 0x58, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0xb8, 0x18,
        0x00, 0x00, 0x00, 0x8e, 0xd8, 0x8e, 0xc0, 0x8e, 0xe0, 0x8e, 0xe8, 0x8e, 0xd0, 0x0f, 0x20,
        0xc0, 0x25, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x22, 0xc0, 0xb9, 0x80, 0x00, 0x00, 0xc0, 0x0f,
        0x32, 0x25, 0xff, 0xfe, 0xff, 0xff, 0x0f, 0x30,
    ];

    let args = ConnectorArgs::new(
        Some("./tests/deb-x86_64-slice.lime"),
        Default::default(),
        None,
    );
    let mut con = create_connector(&args).unwrap();

    let mut buff = [0u8; 128];
    con.phys_read_into(addr, &mut buff).unwrap();

    assert_eq!(buff, volatility_output);
}
